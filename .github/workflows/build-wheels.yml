name: Build wheels

on:
  push:
    branches: [ master, modernize-python-support ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.2
      env:
        # Build Python 3.8-3.12
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        # Skip 32-bit builds and PyPy
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"
        
        # Install build dependencies before building
        CIBW_BEFORE_BUILD: >
          pip install numpy cython &&
          pip install "pysam>=0.22.0" "bx-python>=0.10.0"
        
        # Build BitArray library before Python build
        CIBW_BEFORE_BUILD_LINUX: >
          yum install -y gcc-c++ make &&
          pip install numpy cython &&
          pip install "pysam>=0.22.0" "bx-python>=0.10.0" &&
          cd external/BitArray && make clean && make CC="gcc -fPIC" libbitarr.a && cd ../..
        
        CIBW_BEFORE_BUILD_MACOS: >
          pip install numpy cython &&
          pip install "pysam>=0.22.0" "bx-python>=0.10.0" &&
          cd external/BitArray && make clean && make CC="gcc -arch x86_64 -arch arm64" libbitarr.a && cd ../..
        
        CIBW_BEFORE_BUILD_WINDOWS: >
          pip install numpy cython &&
          pip install "pysam>=0.22.0" "bx-python>=0.10.0"
        
        # Test requirements
        CIBW_TEST_REQUIRES: scipy
        
        # Test command
        CIBW_TEST_COMMAND: >
          pymasc --version &&
          python -c "import PyMaSC; print('PyMaSC import successful')"
        
        # Environment variables for build
        CIBW_ENVIRONMENT: >
          SETUPTOOLS_USE_DISTUTILS=stdlib
        
        # Repair wheel settings for different platforms
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
        
        # Build options
        CIBW_BUILD_VERBOSITY: 1
    
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build numpy cython "pysam>=0.22.0" "bx-python>=0.10.0"
    
    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        make CC="gcc -fPIC" libbitarr.a
        cd ../..
    
    - name: Build sdist
      run: python -m build --sdist
    
    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload to PyPI on release
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v4
      with:
        # unpacks default artifact into dist/
        # if `name: artifact` is omitted, the action will create extra parent dir
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@v1.8.14
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}