name: Build wheels

on:
  # Only build wheels on tagged releases and manual triggers
  push:
    # Always build on version tags
    tags: [ 'v*' ]
    # Check commit messages on main branches for [wheel build] trigger
    branches: [ master, modernize-python-support ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      build_reason:
        description: 'Reason for manual wheel build'
        required: false
        default: 'Manual testing'
        type: string
  # Weekly scheduled build for testing purposes
  schedule:
    - cron: '0 2 * * 1'  # Weekly build on Monday at 2 AM UTC for testing

jobs:
  # Check if we should build wheels based on commit message or event type
  check_build_condition:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      build_reason: ${{ steps.check.outputs.build_reason }}
    steps:
    - uses: actions/checkout@v4
      if: github.event_name == 'push'
      with:
        fetch-depth: 2  # Need at least 2 commits to check commit message

    - name: Check build condition
      id: check
      run: |
        # Check various conditions that should trigger wheel builds
        SHOULD_BUILD="false"
        BUILD_REASON=""

        # Always build on tags and releases
        if [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
          SHOULD_BUILD="true"
          BUILD_REASON="Release event"
        elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
          SHOULD_BUILD="true"
          BUILD_REASON="Version tag push"
        elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
          SHOULD_BUILD="true"
          BUILD_REASON="Manual trigger: ${{ inputs.build_reason }}"
        elif [[ "$GITHUB_EVENT_NAME" == "schedule" ]]; then
          SHOULD_BUILD="true"
          BUILD_REASON="Scheduled weekly build"
        elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
          # Check commit message for [wheel build] trigger
          if git log -1 --pretty=%B | grep -q '\[wheel build\]'; then
            SHOULD_BUILD="true"
            BUILD_REASON="Commit message contains [wheel build]"
          fi
        fi

        echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
        echo "build_reason=$BUILD_REASON" >> $GITHUB_OUTPUT
        echo "🔍 Build condition check:"
        echo "  Event: $GITHUB_EVENT_NAME"
        echo "  Ref: $GITHUB_REF"
        echo "  Should build: $SHOULD_BUILD"
        echo "  Reason: $BUILD_REASON"

  prebuild_sources:
    needs: check_build_condition
    if: needs.check_build_condition.outputs.should_build == 'true'
    uses: ./.github/workflows/test-prebuild.yml

  build_wheels:
    needs: [check_build_condition, prebuild_sources]
    if: needs.check_build_condition.outputs.should_build == 'true'
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Note: Windows support temporarily excluded due to shell compatibility issues
        # Windows users can use WSL2, Docker, or virtual machines to run PyMaSC
        # Windows support may be reconsidered in future phases after core improvements
        os: [ubuntu-latest, macos-13, macos-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download pre-built C sources
      uses: actions/download-artifact@v4
      with:
        name: prebuilt-c-sources
        path: prebuilt-c-sources/

    - name: Deploy pre-built C sources for all Python versions
      run: |
        echo "📁 Deploying pre-built C sources for wheel building..."

        # Deploy all version-specific C files to their correct locations
        for version in 38 39 310 311 312 313; do
          echo "Deploying Python ${version} C sources..."
          for file in prebuilt-c-sources/*_${version}.c; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" "_${version}.c")
              # Find the corresponding .pyx file to determine target location
              target_dir=$(find PyMaSC -name "${basename}.pyx" | head -1 | xargs dirname)
              if [ -n "$target_dir" ]; then
                cp "$file" "${target_dir}/${basename}_${version}.c"
                echo "  ✅ Deployed: $file -> ${target_dir}/${basename}_${version}.c"
              fi
            fi
          done
        done

        echo ""
        echo "📊 All deployed C sources:"
        find PyMaSC -name "*_[0-9][0-9].c" -o -name "*_[0-9][0-9][0-9].c" | sort

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.2
      env:
        # Build Python 3.8-3.13
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*
        # Skip 32-bit builds and PyPy
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"

        # Install build dependencies before building (NO Cython - using pre-built C sources)
        CIBW_BEFORE_BUILD: >
          pip install setuptools wheel &&
          pip install numpy &&
          pip install "pysam>=0.23.2" "pyBigWig>=0.3.18"

        # Build BitArray library before Python build
        CIBW_BEFORE_BUILD_LINUX: >
          yum install -y gcc-c++ make bzip2-devel xz-devel zlib-devel curl-devel openssl-devel &&
          python -c "import sys; print('Python version:', sys.version)" &&
          pip install setuptools wheel &&
          if python -c "import sys; sys.exit(0 if sys.version_info[:2] == (3, 9) else 1)"; then pip install 'numpy<2.0'; else pip install numpy; fi &&
          pip install "pysam>=0.23.2" "pyBigWig>=0.3.18" &&
          cd external/BitArray && make clean && make CC="gcc -fPIC" libbitarr.a && cd ../..

        CIBW_BEFORE_BUILD_MACOS: >
          python -c "import sys; print('Python version:', sys.version)" &&
          pip install setuptools wheel &&
          if python -c "import sys; sys.exit(0 if sys.version_info[:2] == (3, 9) else 1)"; then pip install 'numpy<2.0'; else pip install numpy; fi &&
          pip install "pysam>=0.23.2" "pyBigWig>=0.3.18" &&
          cd external/BitArray && make clean && make CC="gcc -arch x86_64 -arch arm64" libbitarr.a && cd ../..

        # Windows build configuration temporarily disabled
        # CIBW_BEFORE_BUILD_WINDOWS: >
        #   python -c "import sys; print('Python version:', sys.version)" &&
        #   if python -c "import sys; sys.exit(0 if sys.version_info[:2] >= (3, 12) else 1)"; then pip install setuptools wheel; fi &&
        #   if python -c "import sys; sys.exit(0 if sys.version_info[:2] == (3, 9) else 1)"; then pip install 'numpy<2.0'; else pip install numpy; fi &&
        #   pip install "pysam>=0.23.2" "bx-python>=0.10.0"

        # Test requirements
        CIBW_TEST_REQUIRES: scipy

        # Test command
        CIBW_TEST_COMMAND: >
          pymasc --version &&
          python -c "import PyMaSC; print('PyMaSC import successful')"

        # Environment variables for build (enable versioned C source mode)
        CIBW_ENVIRONMENT: >
          SETUPTOOLS_USE_DISTUTILS=stdlib
          BUILD_MODE=versioned

        # Repair wheel settings for different platforms
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}
        CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

        # Build options
        CIBW_BUILD_VERBOSITY: 1

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build numpy cython "pysam>=0.23.2" "pyBigWig>=0.3.18"

    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        make CC="gcc -fPIC" libbitarr.a
        cd ../..

    - name: Build sdist
      run: python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [check_build_condition, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # Only upload to PyPI on release
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - uses: actions/download-artifact@v4
      with:
        # unpacks default artifact into dist/
        # if `name: artifact` is omitted, the action will create extra parent dir
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@v1.8.14
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  build_summary:
    needs: [check_build_condition, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: always() && needs.check_build_condition.outputs.should_build == 'true'
    steps:
    - name: Build Summary
      run: |
        echo "# 🎉 PyMaSC Wheel Build Summary"
        echo ""
        echo "**Build Reason**: ${{ needs.check_build_condition.outputs.build_reason }}"
        echo "**Event**: ${{ github.event_name }}"
        echo "**Ref**: ${{ github.ref }}"
        echo "**Build Status**: ${{ needs.build_wheels.result }}"
        echo ""
        echo "This optimized workflow only builds wheels when necessary:"
        echo "- ✅ Tagged releases (v*)"
        echo "- ✅ GitHub releases"
        echo "- ✅ Manual triggers (workflow_dispatch)"
        echo "- ✅ Commit messages containing [wheel build]"
        echo "- ✅ Weekly scheduled builds (testing)"
        echo ""
        echo "This saves ~80% of CI resources compared to building on every push."