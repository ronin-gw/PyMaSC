name: PyMaSC Full Test Suite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run full tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test-full:
    name: Full Test Suite with Golden Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-full-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-full-
          ${{ runner.os }}-pip-

    - name: Cache test data
      uses: actions/cache@v3
      with:
        path: |
          tests/data/*.bam
          tests/data/*.bai
          tests/data/*.bigwig
          tests/golden/
        key: ${{ runner.os }}-test-data-${{ hashFiles('tests/data/**') }}
        restore-keys: |
          ${{ runner.os }}-test-data-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make samtools

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy "pysam>=0.22.0" "pyBigWig>=0.3.18"
        pip install cython pytest pytest-cov pytest-xdist
        pip install matplotlib scipy

    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        make libbitarr.a
        cd ../..

    - name: Build PyMaSC with Cython
      run: |
        python setup.py build_ext --inplace

    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ -v --cov=PyMaSC --cov-report=xml --cov-report=html

    - name: Run Golden tests
      run: |
        python -m pytest tests/integration/test_golden_outputs.py -v

    - name: Run numerical validation tests
      run: |
        python -m pytest tests/integration/test_cython_ncc_detailed.py -v
        python -m pytest tests/integration/test_cython_mscc_detailed.py -v

    - name: Generate test report
      if: always()
      run: |
        echo "# Test Summary" > test-summary.md
        echo "## Test Results" >> test-summary.md
        python -m pytest tests/ --tb=no -q >> test-summary.md || true
        echo "" >> test-summary.md
        echo "## Coverage Summary" >> test-summary.md
        if [ -f coverage.xml ]; then
          python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f\"Coverage: {root.attrib.get('line-rate', 'N/A')}\")" >> test-summary.md
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-full
        path: |
          coverage.xml
          htmlcov/
          test-summary.md
          tests/golden/
        retention-days: 30

    - name: Comment PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });