name: PyMaSC Matrix Tests

on:
  push:
    branches: [ master, modernize-python-support ]
  pull_request:
    branches: [ master ]

jobs:
  prebuild-sources:
    uses: ./.github/workflows/test-prebuild.yml

  test-matrix:
    needs: prebuild-sources
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI time initially
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Download pre-built C sources
      uses: actions/download-artifact@v4
      with:
        name: prebuilt-c-sources
        path: prebuilt-c-sources/
    
    - name: Deploy pre-built C sources
      run: |
        echo "📁 Deploying pre-built C sources for Python ${{ matrix.python-version }}..."
        py_major_minor="${{ matrix.python-version }}"
        py_major_minor="${py_major_minor//.}"  # Remove dots: 3.8 -> 38
        echo "Looking for files with suffix: _${py_major_minor}.c"
        
        # Copy version-specific C files to their correct locations
        for file in prebuilt-c-sources/*_${py_major_minor}.c; do
          if [ -f "$file" ]; then
            basename=$(basename "$file" "_${py_major_minor}.c")
            # Find the corresponding .pyx file to determine target location
            target_dir=$(find PyMaSC -name "${basename}.pyx" | head -1 | xargs dirname)
            if [ -n "$target_dir" ]; then
              cp "$file" "${target_dir}/${basename}_${py_major_minor}.c"
              echo "  ✅ Deployed: $file -> ${target_dir}/${basename}_${py_major_minor}.c"
            fi
          fi
        done
        
        echo ""
        echo "📊 Deployed C sources for Python ${{ matrix.python-version }}:"
        find PyMaSC -name "*_${py_major_minor}.c" | sort
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS has gcc/make by default with Xcode tools
        echo "Using system compiler"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy "pysam>=0.22.0" "bx-python>=0.10.0"
        pip install pytest pytest-cov matplotlib scipy
        # Note: Cython is NOT installed - we use pre-built C sources
    
    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        if [ "$RUNNER_OS" == "macOS" ]; then
          make CC="gcc -arch x86_64" libbitarr.a
        else
          make libbitarr.a
        fi
        cd ../..
    
    - name: Build PyMaSC using pre-built C sources
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        PYTHON_MAJOR_MINOR: ${{ matrix.python-version == '3.8' && '38' || matrix.python-version == '3.9' && '39' || matrix.python-version == '3.10' && '310' || matrix.python-version == '3.11' && '311' || matrix.python-version == '3.12' && '312' }}
        CYTHON_VERSION_SUFFIX: _${{ matrix.python-version == '3.8' && '38' || matrix.python-version == '3.9' && '39' || matrix.python-version == '3.10' && '310' || matrix.python-version == '3.11' && '311' || matrix.python-version == '3.12' && '312' }}
        BUILD_MODE: versioned
      run: |
        echo "🔧 Building PyMaSC using pre-built C sources for Python ${{ matrix.python-version }}..."
        echo "Environment variables:"
        echo "  PYTHON_VERSION=$PYTHON_VERSION"
        echo "  PYTHON_MAJOR_MINOR=$PYTHON_MAJOR_MINOR"
        echo "  CYTHON_VERSION_SUFFIX=$CYTHON_VERSION_SUFFIX"
        echo "  BUILD_MODE=$BUILD_MODE"
        echo ""
        
        # Build using setup.py with version-specific C sources
        # setup.py will automatically detect and use the deployed C sources
        python setup.py build_ext --inplace
        
        echo ""
        echo "📦 Verifying build results..."
        find PyMaSC -name "*.so" | sort
    
    - name: Run import tests
      run: |
        python -c "import PyMaSC; print(f'PyMaSC version: {PyMaSC.VERSION}')"
        python -c "from PyMaSC.core.ncc import NaiveCCCalculator; print('NCC imported')"
        python -c "from PyMaSC.bacore.bitarray import bitarray; print('bitarray imported')"
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Run integration tests (quick)
      run: |
        python -m pytest tests/integration/ -k "not slow" -v --tb=short
    
    - name: Test PyMaSC commands
      run: |
        python -m PyMaSC.pymasc --version
        python -m PyMaSC.calcmappablelen --version
        python -m PyMaSC.plot --version
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
        retention-days: 30