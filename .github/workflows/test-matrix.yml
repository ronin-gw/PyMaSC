name: PyMaSC Matrix Tests - Source Build

on:
  push:
    branches: [ master, modernize-python-support ]
  pull_request:
    branches: [ master ]

jobs:
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }} (Source Build)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI time initially
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-matrix-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-matrix-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-matrix-
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS has gcc/make by default with Xcode tools
        echo "Using system compiler (Xcode Command Line Tools)"
        xcode-select --print-path
    
    - name: Install Python dependencies with Cython
      run: |
        python -m pip install --upgrade pip
        # Python 3.12+ requires setuptools to be explicitly installed
        if [ "${{ matrix.python-version }}" = "3.12" ] || [ "${{ matrix.python-version }}" = "3.13" ]; then
          pip install setuptools wheel
        fi
        # Python 3.9 requires numpy<2.0 for Cython compatibility
        if [ "${{ matrix.python-version }}" = "3.9" ]; then
          echo "Installing numpy<2.0 for Python 3.9 compatibility"
          pip install "numpy<2.0" cython
        else
          pip install numpy cython
        fi
        pip install "pysam>=0.22.0" "pyBigWig>=0.3.18"
        pip install pytest pytest-cov matplotlib scipy
    
    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        if [ "$RUNNER_OS" == "macOS" ]; then
          make CC="gcc -arch x86_64 -arch arm64" libbitarr.a
        else
          make CC="gcc -fPIC" libbitarr.a
        fi
        cd ../..
    
    - name: Build PyMaSC from .pyx sources (Full Cython Build)
      run: |
        echo "üîß Building PyMaSC from .pyx sources for Python ${{ matrix.python-version }}..."
        echo "This tests the complete build process including Cython compilation"
        echo ""
        
        # Clean any existing build artifacts
        find PyMaSC -name "*.c" -delete 2>/dev/null || true
        find PyMaSC -name "*.so" -delete 2>/dev/null || true
        rm -rf build/ 2>/dev/null || true
        
        # Build directly from .pyx files - this is the REAL build test
        python setup.py build_ext --inplace
        
        echo ""
        echo "üì¶ Verifying build results (.so files):"
        find PyMaSC -name "*.so" | sort
        echo "  Total .so files: $(find PyMaSC -name "*.so" | wc -l)"
        
        echo ""
        echo "üìÅ Generated C files during build:"
        find PyMaSC -name "*.c" | sort
        echo "  Total .c files: $(find PyMaSC -name "*.c" | wc -l)"
    
    - name: Run import tests
      run: |
        echo "üß™ Testing imports for Python ${{ matrix.python-version }}..."
        python -c "import PyMaSC; print(f'PyMaSC version: {PyMaSC.VERSION}')"
        python -c "from PyMaSC.core.ncc import NaiveCCCalculator; print('‚úÖ NCC imported successfully')"
        python -c "from PyMaSC.bacore.bitarray import bitarray; print('‚úÖ bitarray imported successfully')"
        python -c "from PyMaSC.core.mscc import MSCCCalculator; print('‚úÖ MSCC imported successfully')"
    
    - name: Test build-time compilation compatibility
      run: |
        echo "üîç Testing Python ${{ matrix.python-version }} compilation compatibility..."
        echo "  Python version: $(python --version)"
        echo "  Numpy version: $(python -c 'import numpy; print(numpy.__version__)')"
        echo "  Cython version: $(python -c 'import Cython; print(Cython.__version__)')"
        echo "  Compiler used: $(gcc --version | head -1)"
        
        # Test that we can import all Cython modules
        python -c "import sys; from PyMaSC.core import ncc, mscc, mappability, readlen; from PyMaSC.bacore import bitarray, mscc as ba_mscc; from PyMaSC.reader import bigwig; print('‚úÖ All Cython modules imported successfully on Python', sys.version_info[:2])"
    
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests for Python ${{ matrix.python-version }}..."
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Install PyMaSC for CLI testing
      run: |
        echo "üì¶ Installing PyMaSC to enable CLI commands..."
        pip install -e .
        echo "‚úÖ PyMaSC installed in development mode"
    
    - name: Run integration tests (quick)
      run: |
        echo "üß™ Running integration tests for Python ${{ matrix.python-version }}..."
        python -m pytest tests/integration/ -k "not slow" -v --tb=short
    
    - name: Test PyMaSC commands
      run: |
        echo "üß™ Testing PyMaSC command-line interfaces..."
        
        # Test direct CLI commands (installed via pip install -e .)
        pymasc --version
        pymasc-precalc --version
        pymasc-plot --version
        
        # Also test module-based execution
        python -m PyMaSC.pymasc --version
        python -m PyMaSC.calcmappablelen --version
        python -m PyMaSC.plot --version
        
        echo "‚úÖ All CLI commands working on Python ${{ matrix.python-version }}"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-source-build-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
        retention-days: 30