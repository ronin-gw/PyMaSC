name: PyMaSC Matrix Tests - Source Build

on:
  push:
    branches: [ master, modernize-python-support ]
  pull_request:
    branches: [ master ]

jobs:
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }} (Source Build)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI time initially
          - os: macos-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-matrix-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-matrix-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-matrix-
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ make
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS has gcc/make by default with Xcode tools
        echo "Using system compiler (Xcode Command Line Tools)"
        xcode-select --print-path
    
    - name: Install Python dependencies with Cython
      run: |
        python -m pip install --upgrade pip
        # Python 3.12+ requires setuptools to be explicitly installed
        if [ "${{ matrix.python-version }}" = "3.12" ] || [ "${{ matrix.python-version }}" = "3.13" ]; then
          pip install setuptools wheel
        fi
        # Python 3.9 requires numpy<2.0 for Cython compatibility
        if [ "${{ matrix.python-version }}" = "3.9" ]; then
          echo "Installing numpy<2.0 for Python 3.9 compatibility"
          pip install "numpy<2.0" cython
        else
          pip install numpy cython
        fi
        pip install "pysam>=0.22.0" "pyBigWig>=0.3.18"
        pip install pytest pytest-cov matplotlib scipy
    
    - name: Build BitArray library
      run: |
        cd external/BitArray
        make clean
        
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "üçé Building BitArray for macOS (ARM64 environment debug)..."
          echo "System info: $(uname -a)"
          echo "Architecture: $(uname -m)"
          echo "Python info:"
          echo "  Python executable: $(which python)"
          echo "  Python version: $(python --version)"
          echo "  Python architecture: $(python -c 'import platform; print(platform.machine())')"
          echo "  Python platform: $(python -c 'import platform; print(platform.platform())')"
          echo "Available compilers:"
          which gcc || echo "gcc not found"
          which clang || echo "clang not found"
          if which clang > /dev/null; then
            echo "  Clang version: $(clang --version | head -1)"
          fi
          
          # Try native ARM64 build first
          echo "üîç Attempting native ARM64 build..."
          if make CC="clang -arch arm64" libbitarr.a 2>&1; then
            echo "‚úÖ Native ARM64 build successful"
            if command -v lipo > /dev/null; then
              echo "Library architecture: $(lipo -info libbitarr.a)"
            fi
          else
            echo "‚ùå Native ARM64 build failed, trying universal binary..."
            make clean
            if make CC="clang -arch x86_64 -arch arm64" libbitarr.a 2>&1; then
              echo "‚úÖ Universal binary build successful"
              if command -v lipo > /dev/null; then
                echo "Library architecture: $(lipo -info libbitarr.a)"
              fi
            else
              echo "‚ùå Universal binary build failed, trying default build..."
              make clean
              echo "Default build output:"
              make CC="clang" libbitarr.a 2>&1 || {
                echo "‚ùå All builds failed. Makefile content:"
                cat Makefile
                echo "BitArray source files:"
                ls -la *.c *.h
                exit 1
              }
            fi
          fi
        else
          echo "üêß Building BitArray for Linux..."
          make CC="gcc -fPIC" libbitarr.a
        fi
        
        # Verify library was created
        if [ -f libbitarr.a ]; then
          echo "‚úÖ BitArray library created successfully"
          ls -la libbitarr.a
          file libbitarr.a || echo "file command not available"
        else
          echo "‚ùå BitArray library creation failed"
          exit 1
        fi
        
        cd ../..
    
    - name: Build PyMaSC from .pyx sources (Full Cython Build)
      run: |
        echo "üîß Building PyMaSC from .pyx sources for Python ${{ matrix.python-version }}..."
        echo "This tests the complete build process including Cython compilation"
        echo ""
        
        # Display build environment information
        echo "üîç Build Environment Information:"
        echo "  Python version: $(python --version)"
        echo "  Python executable: $(which python)"
        echo "  Platform: $(python -c 'import platform; print(platform.platform())')"
        echo "  Architecture: $(python -c 'import platform; print(platform.machine())')"
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "  macOS version: $(sw_vers -productVersion)"
          echo "  Xcode version: $(xcode-select --version)"
        fi
        echo ""
        
        # Clean any existing build artifacts
        echo "üßπ Cleaning previous build artifacts..."
        find PyMaSC -name "*.c" -delete 2>/dev/null || true
        find PyMaSC -name "*.so" -delete 2>/dev/null || true
        rm -rf build/ 2>/dev/null || true
        
        # Verify BitArray library before build
        echo "üîç Verifying BitArray library:"
        if [ -f "external/BitArray/libbitarr.a" ]; then
          echo "  ‚úÖ BitArray library exists"
          ls -la external/BitArray/libbitarr.a
          if command -v file > /dev/null; then
            echo "  Library info: $(file external/BitArray/libbitarr.a)"
          fi
        else
          echo "  ‚ùå BitArray library missing!"
          exit 1
        fi
        echo ""
        
        # Build directly from .pyx files - this is the REAL build test
        echo "üèóÔ∏è Starting PyMaSC build..."
        echo "üìã Build environment details:"
        echo "  CC: ${CC:-default}"
        echo "  CFLAGS: ${CFLAGS:-default}"
        echo "  LDFLAGS: ${LDFLAGS:-default}"
        
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "üîç macOS-specific build debugging:"
          echo "  Python architecture: $(python -c 'import platform; print(platform.machine())')"
          echo "  System architecture: $(uname -m)"
          echo "  BitArray library detailed check:"
          if command -v file > /dev/null; then
            echo "    File type: $(file external/BitArray/libbitarr.a)"
          fi
          if command -v lipo > /dev/null; then
            echo "    Library architectures: $(lipo -info external/BitArray/libbitarr.a 2>/dev/null || echo 'lipo info failed')"
            echo "    Detailed arch info: $(lipo -detailed_info external/BitArray/libbitarr.a 2>/dev/null || echo 'detailed lipo info failed')"
          fi
          echo "  Python sysconfig platform:"
          python -c "import sysconfig; print('    Platform:', sysconfig.get_platform())"
          echo "  setup.py BitArray link configuration check:"
          python -c "
import platform, os
print('    Platform detected by setup.py:', platform.system())
if platform.system() == 'Darwin':
    print('    Will use: -Wl,-all_load external/BitArray/libbitarr.a')
else:
    print('    Will use: external/BitArray/bit_array.o')
print('    BitArray lib exists:', os.path.exists('external/BitArray/libbitarr.a'))
print('    BitArray obj exists:', os.path.exists('external/BitArray/bit_array.o'))
"
        fi
        
        echo "üìù Running setup.py build with verbose output..."
        build_output=$(python setup.py build_ext --inplace --verbose 2>&1)
        build_exit_code=$?
        
        echo "$build_output"
        
        if [ $build_exit_code -eq 0 ]; then
          echo "‚úÖ PyMaSC build completed successfully on $(uname -m) architecture"
        else
          echo "‚ùå PyMaSC build failed on $(uname -m) architecture (exit code: $build_exit_code)"
          echo ""
          echo "üîç Detailed error analysis:"
          
          # Check for specific error patterns
          if echo "$build_output" | grep -q "ignoring file.*found architecture.*required architecture"; then
            echo "  üéØ ARCHITECTURE MISMATCH DETECTED:"
            echo "$build_output" | grep "ignoring file.*found architecture.*required architecture"
            echo "  This indicates BitArray library architecture doesn't match Python architecture"
          fi
          
          if echo "$build_output" | grep -q "symbol not found"; then
            echo "  üéØ SYMBOL NOT FOUND ERROR:"
            echo "$build_output" | grep "symbol not found"
            echo "  This indicates linking issues with BitArray library"
          fi
          
          if echo "$build_output" | grep -q "ld:"; then
            echo "  üéØ LINKER ERRORS:"
            echo "$build_output" | grep "ld:"
          fi
          
          echo ""
          echo "  üìä System configuration summary:"
          python -c "
import sysconfig, platform, os
print('    Python platform:', sysconfig.get_platform())
print('    Python architecture:', platform.machine())
print('    System architecture:', os.uname().machine if hasattr(os, 'uname') else 'unknown')
print('    CFLAGS:', sysconfig.get_config_var('CFLAGS'))
print('    LDFLAGS:', sysconfig.get_config_var('LDFLAGS'))
"
          exit 1
        fi
        
        echo ""
        echo "üì¶ Verifying build results (.so files):"
        if find PyMaSC -name "*.so" | head -1 > /dev/null; then
          find PyMaSC -name "*.so" | sort
          echo "  Total .so files: $(find PyMaSC -name "*.so" | wc -l)"
        else
          echo "  ‚ùå No .so files generated!"
          exit 1
        fi
        
        echo ""
        echo "üìÅ Generated C files during build:"
        find PyMaSC -name "*.c" | sort
        echo "  Total .c files: $(find PyMaSC -name "*.c" | wc -l)"
    
    - name: Run import tests
      run: |
        echo "üß™ Testing imports for Python ${{ matrix.python-version }}..."
        python -c "import PyMaSC; print(f'PyMaSC version: {PyMaSC.VERSION}')"
        python -c "from PyMaSC.core.ncc import NaiveCCCalculator; print('‚úÖ NCC imported successfully')"
        python -c "from PyMaSC.bacore.bitarray import bitarray; print('‚úÖ bitarray imported successfully')"
        python -c "from PyMaSC.core.mscc import MSCCCalculator; print('‚úÖ MSCC imported successfully')"
    
    - name: Test build-time compilation compatibility
      run: |
        echo "üîç Testing Python ${{ matrix.python-version }} compilation compatibility..."
        echo "  Python version: $(python --version)"
        echo "  Numpy version: $(python -c 'import numpy; print(numpy.__version__)')"
        echo "  Cython version: $(python -c 'import Cython; print(Cython.__version__)')"
        echo "  Compiler used: $(gcc --version | head -1)"
        
        # Test that we can import all Cython modules
        python -c "import sys; from PyMaSC.core import ncc, mscc, mappability, readlen; from PyMaSC.bacore import bitarray, mscc as ba_mscc; from PyMaSC.reader import bigwig; print('‚úÖ All Cython modules imported successfully on Python', sys.version_info[:2])"
    
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests for Python ${{ matrix.python-version }}..."
        python -m pytest tests/unit/ -v --tb=short
    
    - name: Install PyMaSC for CLI testing
      run: |
        echo "üì¶ Installing PyMaSC to enable CLI commands..."
        pip install -e .
        echo "‚úÖ PyMaSC installed in development mode"
    
    - name: Run integration tests (quick)
      run: |
        echo "üß™ Running integration tests for Python ${{ matrix.python-version }}..."
        python -m pytest tests/integration/ -k "not slow" -v --tb=short
    
    - name: Test PyMaSC commands
      run: |
        echo "üß™ Testing PyMaSC command-line interfaces..."
        
        # Test direct CLI commands (installed via pip install -e .)
        pymasc --version
        pymasc-precalc --version
        pymasc-plot --version
        
        # Also test module-based execution
        python -m PyMaSC.pymasc --version
        python -m PyMaSC.calcmappablelen --version
        python -m PyMaSC.plot --version
        
        echo "‚úÖ All CLI commands working on Python ${{ matrix.python-version }}"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-source-build-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml
        retention-days: 30